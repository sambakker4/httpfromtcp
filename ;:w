package server

import (
	"log"
	"net"
	"sync/atomic"
	"strconv"
	"github.com/sambakker4/httpfromtcp/internal/response"
)
type Server struct {
	Listener net.Listener	
	isClosed *atomic.Bool
}

func Serve(port int) (*Server, error) {
	listener, err := net.Listen("tcp", ":" + strconv.Itoa(port))
	if err != nil {
		return &Server{}, err
	}

	isClosed := &atomic.Bool{}
	isClosed.Store(false)

	server := &Server{
		Listener: listener,
		isClosed: isClosed,
	}

	go server.listen()

	return server, nil
}

func (s *Server) Close() error {
	s.isClosed.Store(true)
	err := s.Listener.Close()
	return err
}

func (s *Server) listen() {
	for !s.isClosed.Load() {
		connection, err := s.Listener.Accept()
		if s.isClosed.Load() {
			break
		}

		if err != nil {
			log.Printf("connection error: %s\n", err.Error())
			continue
		}
		s.handle(connection)
	}
}

func (s *Server) handle(conn net.Conn) {
	headers := response.GetDefaultHeaders(0)
	err := response.WriteStatusLine(conn, 200)
	if err != nil {
		log.Printf("error writing headers: %s\n", err.Error())
	}
	err = conn.Close()
	if err != nil {
		log.Printf("closing connection error: %s\n", err.Error())
	}
}
